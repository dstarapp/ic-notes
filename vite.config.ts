import vue from '@vitejs/plugin-vue';
import { defineConfig } from 'vite';
import path from 'path';
import dfxJson from './dfx.json';
import fs from 'fs';
import { resolve } from 'path';
import autoprefixer from 'autoprefixer';

const isDev = process.env.NODE_ENV !== 'production';

type Network = 'ic' | 'local';

interface CanisterIds {
  [key: string]: { [key in Network]: string };
}

let canisterIds: CanisterIds;
try {
  canisterIds = JSON.parse(fs.readFileSync(isDev ? '.dfx/local/canister_ids.json' : './canister_ids.json').toString());
} catch (e) {
  console.error('\n⚠️  Before starting the dev server run: dfx deploy\n\n');
}

// List of all aliases for canisters
// This will allow us to: import { canisterName } from "canisters/canisterName"
const aliases = Object.entries(dfxJson.canisters).reduce((acc, [name, _value]) => {
  // Get the network name, or `local` by default.
  const networkName = process.env['DFX_NETWORK'] || (process.env.NODE_ENV === 'production' ? 'ic' : 'local');
  const outputRoot = path.join(__dirname, '.dfx', networkName, 'canisters', name);

  return {
    ...acc,
    ['canisters/' + name]: path.join(outputRoot, 'index' + '.js'),
    ['canisters/' + name + '.did']: path.join(outputRoot, name + '.did.js'),
  };
}, {});

// Generate canister ids, required by the generated canister code in .dfx/local/canisters/*
// This strange way of JSON.stringifying the value is required by vite
const canisterDefinitions = Object.entries(canisterIds).reduce(
  (acc, [key, val]) => ({
    ...acc,
    [`process.env.${key.toUpperCase()}_CANISTER_ID`]: isDev ? JSON.stringify(val.local) : JSON.stringify(val.ic),
  }),
  {}
);

// See guide on how to configure Vite at:
// https://vitejs.dev/config/
export default defineConfig({
  root: 'src/notes_assets',
  css: {
    postcss: {
      plugins: [
        // 前缀追加
        require('autoprefixer')({
          rootValue: 37.5,
          overrideBrowserslist: ['> 1%', 'last 2 versions', 'not ie <= 10'],
          grid: true,
        }),
        require('postcss-flexbugs-fixes'),
      ],
    },
    preprocessorOptions: {
      less: {
        additionalData: `@import "${path.resolve(__dirname, 'src/notes_assets/src/assets/css/moveLibrary.less')}";`,
        javascriptEnabled: true,
      },
    },
  },
  build: {
    outDir: '../../dist/notes_assets',
    emptyOutDir: true,
    commonjsOptions: {
      ignoreTryCatch: false,
      transformMixedEsModules: true,
    },
  },
  plugins: [vue()],
  resolve: {
    alias: {
      '@': resolve(__dirname, 'src'),
      // stream: "stream-browserify",
      stream: 'vite-compatible-readable-stream',
      // Here we tell Vite the "fake" modules that we want to define
      ...aliases,
    },
  },
  server: {
    host: '0.0.0.0',
    fs: {
      strict: false,
      allow: ['.'],
    },
    port: 8080,
    proxy: {
      // This proxies all http requests made to /api to our running dfx instance
      '/api': {
        target: `http://127.0.0.1:4943`,
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api/, '/api'),
      },
    },
  },
  define: {
    // Here we can define global constants
    // This is required for now because the code generated by dfx relies on process.env being set
    ...canisterDefinitions,
    'process.env.NODE_ENV': JSON.stringify(isDev ? 'development' : 'production'),
  },
});
